// This file is effectively prepended to any .wasm file being compiled.
// Imports in this file are provided by the system.

config {
  memory.fixed: 1048576
}

memory {
  _current_break: zero 4;
}

func sbrk(amt i32) i32 {
  var temp i32 = loadI32(_current_break);
  storeI32(_current_break, temp + amt);
  // Note: _end is a special memory label generated by the assembler that
  // points to the end of statically reserved memory.  Currently we can't
  // initialize memory with symbols, so do relative addressing instead.
  return _end + temp;
}

import func powF32(f32, f32) f32;
import func sinF32(f32) f32;
import func cosF32(f32) f32;

import func powF64(f64, f64) f64;
import func sinF64(f64) f64;
import func cosF64(f64) f64;

import func threadingSupported() i32;

import func atomicLoadI32(i32) i32;
import func atomicStoreI32(i32, i32) void;
import func atomicCompareExchangeI32(i32, i32, i32) i32;

import func threadCreate(i32, i32) void;

// HACK unconditional, user facing export.
// Really, we'd only want to export this to the system if it was used.
//export func threadStart(f i32, context i32) void {
//  (i32)void(f)(context);
//}

import func consoleI32(i32) void;
import func consoleString(i32, i32) void;