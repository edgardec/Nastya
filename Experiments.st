'From Squeak6.0alpha of 12 October 2020 [latest update: #19961] on 14 October 2020 at 11:13:10 am'!HVTransientView subclass: #Experiments	instanceVariableNames: 'page resources'	classVariableNames: ''	poolDictionaries: ''	category: 'WASM'!!Experiments commentStamp: 'edc 11/21/2019 08:29' prior: 0!Experiments queMeCuenta: 88Experiments stop.Experiments startDebugOn: 8080!!Experiments methodsFor: 'urls' stamp: 'edc 10/14/2020 10:08'!bajar	| id removeItem temp |	id := (request getFields at: 'id') asNumber.	id = self class todoList items size ifFalse:[	removeItem := self class todoList items at: id.	temp := self class todoList items at: id.	self class todoList items		at: id		put: (self class todoList items at: id + 1).	self class todoList items at: id + 1 put: temp].	^ self redirectTo: '/todo'! !!Experiments methodsFor: 'urls' stamp: 'edc 10/4/2019 20:23'!br	self class externalFolder: 'wabt'.	self page: (StandardFileStream readOnlyFileNamed: self filePath + 'collision.html') contents.	^ self page! !!Experiments methodsFor: 'urls' stamp: 'edc 8/11/2019 07:33'!calcula	self class externalFolder: 'wabt'.	self page: nil.self pageAdd: (StandardFileStream readOnlyFileNamed: self filePath + 'calcula.html') contents.	^ self pageEnd	! !!Experiments methodsFor: 'urls' stamp: 'edc 9/11/2020 06:46'!chasm	| path |	self class externalFolder: 'chasm/docs'.	path := self filePath.	^ (StandardFileStream readOnlyFileNamed: path , 'index.html') contents! !!Experiments methodsFor: 'urls' stamp: 'edc 6/4/2017 12:02'!click	| fields x y c aPoint this |	fields := request fields.	c := fields keys first findTokens: ','.	x := c first asInteger.	y := c last asInteger.	aPoint := Point x: x y: y.		this := World submorphs				detect: [:m | m containsPoint: aPoint]				ifNone: [].					! !!Experiments methodsFor: 'urls' stamp: 'edc 6/7/2017 13:37'!codeMirror	Transcript clear.	self class externalFolder: 'codeMirror'.	self page: nil.	self pageAdd: (StandardFileStream readOnlyFileNamed: self filePath + 'index.html') contents.	^ self pageEnd.! !!Experiments methodsFor: 'urls' stamp: 'edc 1/11/2017 09:27'!compile| fields try resp |	fields := request fields.	try := (fields at: 'value') first.	resp := Compiler evaluate: try.	^resp! !!Experiments methodsFor: 'urls' stamp: 'edc 3/14/2019 10:43'!consoleLog^(StandardFileStream readOnlyFileNamed: self class filePath + 'consoleLog.html') contents.! !!Experiments methodsFor: 'urls' stamp: 'edc 3/15/2019 07:09'!debugMe	| fields |	fields := request fields.	self halt.! !!Experiments methodsFor: 'urls' stamp: 'edc 1/12/2019 07:31'!default	self class externalFolder: 'Experiments'.	^ '<!!doctype html><head><title>ChanchoWasm</title></head><body>				<img src="pictures/ChanchoWasm.png" ></body></html>'! !!Experiments methodsFor: 'urls' stamp: 'edc 3/14/2019 10:19'!demos	| lista |	self class externalFolder: 'Experiments'.	self page: nil.	self pageAdd: self htmStart.	self pageAdd: '<body>'.	lista := self class demos.	self pageAdd: '<div class="list-output">          <ul>'.	lista		do: [:nombre | self				pageAdd: (self buttonImage: nombre asString linkTo: '/demosExecute:' , nombre)].	^ self pageEnd! !!Experiments methodsFor: 'urls' stamp: 'edc 3/14/2019 10:48'!demos2	| lista |	self class externalFolder: 'webassemblyExamples/js-api-examples/img'.	self page: nil.	self pageAdd: self htmStart.	self pageAdd: '<body>'.	lista := self class demos2.	self pageAdd: '<div class="list-output">          <ul>'.	lista		do: [:nombre | self				pageAdd: (self buttonImage: nombre asString linkTo: '/demos2Execute:' , nombre)].	^ self pageEnd! !!Experiments methodsFor: 'urls' stamp: 'edc 3/14/2019 10:51'!demos2Execute: fileName 	| htmlName |	self class externalFolder: 'webassemblyExamples/js-api-examples/'.	htmlName := (fileName splitBy: '.png') first.	self page: (StandardFileStream readOnlyFileNamed: self class filePath + htmlName) contents.	self pageAdd: self consoleLog.	^ self pageEnd! !!Experiments methodsFor: 'urls' stamp: 'edc 3/14/2019 10:18'!demosExecute: fileName 	| htmlName |	self class externalFolder: 'wabt'.	htmlName := (fileName splitBy: '.png') first.	self page: (StandardFileStream readOnlyFileNamed: self class filePath + htmlName) contents.	^ self pageEnd! !!Experiments methodsFor: 'urls' stamp: 'edc 10/16/2019 09:16'!dispatchOn: method 	"Dispatch to correct method:	- If method is empty we call #default	- If the selector is allowed to be executed then	we just call it	- If method is prefixed with 'src' and viewing the	source is allowed,	then we return a HTML page with the source for	that method."	| m split couldExec p filePath dir |	Transcript show: method;		 tab.	method isEmptyOrNil		ifTrue: [^ self default].	m := method asSymbol.	(self allowedSelector: m)		ifTrue: [^ self perform: m].	split := method splitBy: ':'.	couldExec := (split first , ':') asSymbol.	(self allowedSelector: couldExec)		ifTrue: [self class externalFolder: nil.			^ self perform: couldExec with: split last withBlanksCondensed]		ifFalse: [p := self urlStream url path.			dir := FileDirectory default.			filePath := dir pathName.			self class externalFolder				ifNotNil: [filePath := filePath , FileDirectory slash , self class externalFolder].			p				do: [:ea | filePath := filePath , FileDirectory slash , ea].			(dir fileExists: filePath)				ifTrue: [(filePath endsWith: 'wasm')						ifTrue: [self response contentType: 'application/wasm'].					(filePath endsWith: 'js')						ifTrue: [self response contentType: 'application/javascript'].					Transcript show: self response contentType;show:String cr.					^ StandardFileStream readOnlyFileNamed: filePath]				ifFalse: [Transcript show: 'This path ' , '<h3>' , filePath , '</h3>' , 'is unimplemented';						 cr.					^ 'This path ' , '<h3>' , filePath , '</h3>' , 'is unimplemented']]! !!Experiments methodsFor: 'urls' stamp: 'edc 12/20/2018 15:56'!ex	| rootDir aList img|	self class externalFolder: 'wabt'.	rootDir := FileDirectory on: self class filePath.						aList := rootDir fileNamesMatching: '*.html'.aList do:[:aString|self class demos add: aString.	self class externalFolder: 'Experiments'.	img := (SimpleButtonMorph newWithLabel: aString) imageForm.	img writePNGfileNamed: self filePath + 'img/' + aString + '.png'].! !!Experiments methodsFor: 'urls' stamp: 'edc 12/20/2018 15:31'!ex2	| todo rootDir thisDir path thisName aList |	self class externalFolder: 'webassemblyExamples2'.	rootDir := FileDirectory on: self class filePath.	path := rootDir pathName.	todo := rootDir directoryNames asOrderedCollection.	[todo isEmpty]		whileFalse: [thisName := todo removeFirst.			Transcript show: thisName;				 cr.			Transcript show: '======>'.			thisDir := FileDirectory on: path , FileDirectory slash , thisName.			thisDir				withAllSubdirectoriesCollect: [:subDir | 					self halt.					aList := subDir fileNamesMatching: '*.js']]! !!Experiments methodsFor: 'urls' stamp: 'edc 12/21/2018 07:22'!execute: fileName|htmlName|self class externalFolder: 'wabt'.htmlName := (fileName splitBy:'.png') first.self page:(StandardFileStream readOnlyFileNamed: self class filePath + htmlName) contents.^self pageEnd! !!Experiments methodsFor: 'urls' stamp: 'edc 4/21/2018 06:36'!gitreveal	self redirectTo:'http://github.com/hakimel/reveal.js/'! !!Experiments methodsFor: 'urls' stamp: 'edc 9/4/2020 14:28'!gwd	| lista |		self class externalFolder: 'Experiments/img'.	self page: nil.	self pageAdd: self htmStart.	self pageAdd: '<body>'.	lista := self class gwd.	self pageAdd: '<div class="list-output">          <ul>'.	lista		do: [:nombre | self				pageAdd: (self buttonImage: nombre asString linkTo: '/gwdExecute:' , nombre)].	^ self pageEnd! !!Experiments methodsFor: 'urls' stamp: 'edc 9/4/2020 14:29'!gwdExecute: fileName 	| folder |	folder := (fileName splitBy: '.jpg') first.		self class externalFolder: folder.	self page: (StandardFileStream readOnlyFileNamed: self class filePath + 'index.html') contents.	^ self page! !!Experiments methodsFor: 'urls' stamp: 'edc 6/11/2019 07:24'!highLight	| section control result full data file l spanSection spanControl |	spanSection := '<span style=color: Navy; font-weight:bold; '',''>'.	spanControl := '<span style=color: Tomato; font-weight:bold; '',''>'.	section := MVP1Spec sectionNames.	control := MVP1Spec controlInstructions.	result := FileList2 modalFileSelector.	full := result directory fullNameFor: result name.	data := String new.	file := StandardFileStream readOnlyFileNamed: full.	[file atEnd]		whileFalse: [l := file nextLine withBlanksTrimmed.			l := l splitBy: ' '.			l				do: [:word | 					(section includes: word withoutParentesis)						ifTrue: [data := data , spanSection , word , '</span>'].					(control includes: word withoutParentesis)						ifTrue: [data := data , spanControl , word , '</span>'].					data := data , ' ' , word].data := data ,String lf].Transcript open.Transcript show: data.	self halt! !!Experiments methodsFor: 'urls' stamp: 'edc 6/11/2019 11:46'!hl	Transcript clear.	self class externalFolder: ''.	self page: (StandardFileStream readOnlyFileNamed: self filePath + 'highlighting.html') contents.	^ self page! !!Experiments methodsFor: 'urls' stamp: 'edc 9/11/2020 08:04'!hotel	self class externalFolder: 'Hotel'.	self page: nil.	self pageAdd: (StandardFileStream readOnlyFileNamed: self filePath + 'index.html') contents.	^ self page! !!Experiments methodsFor: 'urls' stamp: 'edc 2/9/2017 08:13'!loremipsum	^ '<p class="lead"<p>  Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Maecenas enim. Nulla facilisi. Vestibulum accumsan augue vulputate justo. Fusce faucibus. Sed blandit, neque sed lacinia nonummy, diam quam imperdiet justo, at dictum augue nunc a neque. Sed urna lacus, tincidunt at, aliquam id, fringilla id, felis. Vivamus feugiat molestie quam. Sed id dolor. Sed ac purus id sapien sollicitudin ultricies. Aliquam hendrerit orci et odio. Suspendisse volutpat wisi at sem. Integer eget nulla. Duis eu diam a nunc condimentum tempus. Praesent gravida metus vitae massa. Aliquam neque magna, fringilla eu, porta id, interdum sit amet, dui. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Proin lorem est, ultrices sit amet, condimentum vitae, vehicula a, massa </p>.'! !!Experiments methodsFor: 'urls' stamp: 'edc 9/9/2020 09:15'!markdown	| path |		self class externalFolder: 'markdown'.		path := FileDirectory default pathName.	^ (StandardFileStream readOnlyFileNamed: path , '/markdown/index.html') contents.! !!Experiments methodsFor: 'urls' stamp: 'edc 10/16/2019 08:56'!memory	self class externalFolder: 'wabt'.	self page: (StandardFileStream readOnlyFileNamed: self filePath + 'memory1.html') contents.	^ self page! !!Experiments methodsFor: 'urls' stamp: 'edc 3/21/2019 08:48'!queMeCuenta| l |	l := LedMorph new.	l value: self class queMeCuenta.	l extent: 120 @ 40.	^ l imageForm! !!Experiments methodsFor: 'urls' stamp: 'edc 10/14/2020 10:10'!removeitem	"Remove an item in the todolist. Here we pick out	the index from the url with some low level methods in the HttpRequest	object held in the instance variable req.	When we are finished we do a redirect to the default page,	which means that the web browser will reload the #default method in this view."	| id removeItem |		id := (request getFields at: 'id') asNumber.	removeItem :=	self class todoList  items at: id.	self class todoList  removeItem: removeItem.	^ self redirectTo:'/todo'! !!Experiments methodsFor: 'urls' stamp: 'edc 4/21/2018 06:51'!reveal	Transcript clear.	self class externalFolder: 'reveal.js-master'.	^StandardFileStream readOnlyFileNamed: self filePath , 'demo.html'.	! !!Experiments methodsFor: 'urls' stamp: 'edc 10/14/2020 10:09'!subir	| id removeItem temp |	id := (request getFields at: 'id') asNumber.id = 1 ifFalse:[	removeItem := self class todoList items at: id.	temp := self class todoList items at: id.	self class todoList items		at: id		put: (self class todoList items at: id - 1).	self class todoList items at: id - 1 put: temp.].	^ self redirectTo: '/todo'! !!Experiments methodsFor: 'urls' stamp: 'edc 10/14/2020 06:54'!teach	self class externalFolder: 'DescubriendoSqueak'.	self page: nil.self pageAdd: (StandardFileStream readOnlyFileNamed: self filePath + 'DescubriendoSqueak2.html') contents.	^ self pageEnd	! !!Experiments methodsFor: 'urls' stamp: 'edc 1/9/2019 09:00'!testself page: self htmStart.self pageAdd:self resumeCss.self pageAdd:self createWasmBanner.self pageAdd:self createHeader.self pageAdd:self createResume.self pageAdd:self createTalkItem.self pageAdd:self createSocialItem.^self pageEnd! !!Experiments methodsFor: 'urls' stamp: 'edc 10/5/2019 04:57'!tim	self class externalFolder: 'tim'.	self page: (StandardFileStream readOnlyFileNamed: self filePath + 'index.html') contents.	^ self page! !!Experiments methodsFor: 'urls' stamp: 'edc 10/14/2020 11:11'!todo	| count |	self class externalFolder: 'todo'.	self page: nil.		self h1: 'Todo list @morplenauta'.	count := 1.	self pageAdd: '<form action="/tasks" method="post"><div class="name"><input text="name" placeholder="Add a new task" type="text" ></div><div class="delete"></div></form>'.	self class todoList items		do: [:item | 			self				pageAdd: (self buttonImage: 'subirPict.jpg' linkTo: 'subir?id=' , count fullPrintString).			self pageAdd: '   ' , item.			self				pageAdd: (self buttonImage: 'bajarPict.jpg' linkTo: 'bajar?id=' , count fullPrintString).			self				pageAdd: (self buttonImage: '/removePict.jpg' linkTo: 'removeItem?id=' , count fullPrintString).			self pageAdd: '<br>'.			count := count + 1].	self pageAdd: '<br>'			, (self buttonImage: 'grabarPict.jpg' linkTo: 'grabarTodo?id=' , count fullPrintString).	^ self pageEnd! !!Experiments methodsFor: 'urls' stamp: 'edc 4/29/2019 07:30'!version| l |	l := LedMorph new.	l value: self class queMeCuenta.	l extent: 120 @ 40.	^ l imageForm! !!Experiments methodsFor: 'urls' stamp: 'edc 6/3/2017 12:22'!wassemblerTranscript clear.	self class externalFolder: 'wassembler'.	self page: nil.self pageAdd: (StandardFileStream readOnlyFileNamed: self filePath + 'index.html') contents.	^ self pageEnd	! !!Experiments methodsFor: 'urls' stamp: 'edc 6/4/2017 11:58'!webWorld^self		buttonImage: '/world'		linkTo: 'click'	! !!Experiments methodsFor: 'urls' stamp: 'edc 12/8/2016 05:10'!world	^ World imageForm ! !!Experiments methodsFor: 'urls' stamp: 'edc 1/26/2017 10:08'!zipBeginself class externalFolder: 'Experiments'.	self page: nil.	self pageAdd: '<html><head><script src="js/prototype.js" language="JavaScript" type="text/javascript"></script>'.	self pageAdd: (StandardFileStream readOnlyFileNamed: self filePath + 'txt/zip.html') contents.	^ self pageEnd! !!Experiments methodsFor: 'utilities' stamp: 'edc 6/4/2017 11:51'!buttonImage: url linkTo: link 	"Embed an image."	| s |	s := '<a id="pictureMap"	href= "' , link , '">' , '<img alt="" ismap="ismap" src="' , url , '">'.	^ s! !!Experiments methodsFor: 'utilities' stamp: 'edc 2/1/2017 08:47'!randomImg	^ 'http://www.squeakros.org/Divagaciones/img/' , #('AutitoMecano.gif' 'Byron8meses.jpg' 'CasaDeMisSue¦É¬±os.jpg' 'CatsClubBallooning.jpg' 'Colin and Edgar.jpg' 'DonUri.jpg' 'EdgarElMorplenauta.jpg' 'Edgar_8144.jpg' 'EdgarconDanIngalls.2.jpg' 'Nastya2meses.jpg' 'R8.jpg' 'ScarlettJohansson2.jpg' 'yo.JPG' 'fangio_ger_57.gif') atRandom! !!Experiments methodsFor: 'html' stamp: 'edc 10/14/2020 07:49'!closeTag: aString	self pageAdd: '</' , aString , '>'.! !!Experiments methodsFor: 'html' stamp: 'edc 10/14/2020 07:57'!datalist: anArray options: aList"A list of options for an input field. It shows a dropdown below the input field while the user is typing."self pageAdd: '<label>' , (anArray at: 1) , '<input list=" ', (anArray at: 2) ,'name="', (anArray at: 3) , '" /></label>','<datalist id="' ,(anArray at: 1) , '">'.aList do:[:ea| self pageAdd: '<option value=" ',ea,'>'].self pageAdd: '</datalist>'! !!Experiments methodsFor: 'html' stamp: 'edc 12/19/2018 09:48'!divString: aString 	self pageAdd: '<div>' , aString , '</div>'! !!Experiments methodsFor: 'html' stamp: 'edc 12/9/2016 17:27'!h1: aString	self pageAdd: '<h1>' , aString , '</h1>'.! !!Experiments methodsFor: 'html' stamp: 'edc 12/9/2016 17:28'!h2: aString	self pageAdd: '<h2>' , aString , '</h2>'.! !!Experiments methodsFor: 'html' stamp: 'edc 12/9/2016 17:28'!h3: aString	self pageAdd: '<h2>' , aString , '</h3>'.! !!Experiments methodsFor: 'html' stamp: 'edc 10/14/2020 10:18'!head^'<HEAD><META HTTP-EQUIV="Refresh" CONTENT="1"></HEAD>'! !!Experiments methodsFor: 'html' stamp: 'edc 12/20/2018 16:05'!htmStart	^ '<!!doctype html><html><head>    <meta charset="utf-8"><title>WASM test</title></head>'! !!Experiments methodsFor: 'html' stamp: 'edc 12/9/2016 17:35'!img: aString style: aStyle	self pageAdd: '<img src= img/' , aString , ' style=" ' , aStyle , '  ;">  ''		'.! !!Experiments methodsFor: 'html' stamp: 'edc 10/14/2020 07:49'!openTag: aString	self pageAdd: '<' , aString , '>'.! !!Experiments methodsFor: 'html' stamp: 'edc 2/10/2017 20:31'!pageContent: aMiHTMLData 	^ ' <!!-- Content   ================================================== -->   <div id="content-wrap">   	<div class="row">   		<div id="main" class="eight columns">	   		<article class="entry">					<header class="entry-header">						<h2 class="entry-title">							<a href="single.html" title="">' + aMiHTMLData title + '</a>						</h2> 				 											<div class="entry-meta">							<ul>								<li>' + aMiHTMLData date + '</li>								<span class="meta-sep">&bull;</span>																<li><a href="#" title="" rel="category tag">Ghost</a></li>								<span class="meta-sep">&bull;</span>								<li>' + aMiHTMLData author + '</li>							</ul>						</div> 					 					</header> 										<div class="entry-content">						' + aMiHTMLData body + '					</div> 				</article> <!!-- end entry -->'! !!Experiments methodsFor: 'html' stamp: 'edc 1/8/2019 07:12'!pageEnd	self pageAdd: '</body> 	</html> '.	^ self page! !!Experiments methodsFor: 'accessing' stamp: 'edc 12/10/2016 07:47'!filePath	^ FileDirectory default pathName , FileDirectory slash , self class externalFolder  , FileDirectory slash.! !!Experiments methodsFor: 'accessing' stamp: 'edc 12/7/2016 08:17'!page	^ page ifNil: [ page _  String new].! !!Experiments methodsFor: 'accessing' stamp: 'edc 12/7/2016 08:18'!page: anObject	page := anObject! !!Experiments methodsFor: 'accessing' stamp: 'edc 12/9/2016 08:49'!pageAdd: aString	 page:= self page,aString,String lf! !!Experiments methodsFor: 'accessing' stamp: 'edc 12/7/2016 08:21'!resources^(PackageInfo named:  'HV-Divagaciones')  resources! !!Experiments methodsFor: 'css' stamp: 'edc 12/8/2016 08:44'!modernWebColors	^ (StandardFileStream readOnlyFileNamed:self filePath, '/css/ModernWebColors.css') contents! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Experiments class	instanceVariableNames: 'currentPage externalFolder user resources lista colores queMeCuenta todoList'!!Experiments class methodsFor: 'accessing' stamp: 'edc 1/26/2017 09:28'!colores	^ colores		! !!Experiments class methodsFor: 'accessing' stamp: 'edc 1/26/2017 09:29'!colores: aDict " Experiments colores: self "	colores := aDict! !!Experiments class methodsFor: 'accessing' stamp: 'edc 12/21/2018 10:29'!createFolderStructure"Experiments createFolderStructure"| rootDir|	self  externalFolder: 'Experiments'.rootDir := FileDirectory on: self  filePath.#('css' 'fonts' 'html' 'img' 'js' 'src') do:[:dir| rootDir createDirIfnotExists: dir].! !!Experiments class methodsFor: 'accessing' stamp: 'edc 2/6/2017 08:27'!currentPage"Experiments currentPage"	^ currentPage! !!Experiments class methodsFor: 'accessing' stamp: 'edc 2/6/2017 08:28'!currentPage: aMiHTMLData	currentPage:= aMiHTMLData! !!Experiments class methodsFor: 'accessing' stamp: 'edc 12/21/2018 07:26'!demos| rootDir|	"Experiments demos explore"	 self  externalFolder: 'Experiments/img'.	rootDir := FileDirectory on: self  filePath.						^rootDir fileNamesMatching: '*.png'.! !!Experiments class methodsFor: 'accessing' stamp: 'edc 3/1/2019 08:22'!demos2	"Experiments demos2"	| rootDir img |	self externalFolder: 'webassemblyExamples/js-api-examples/img'.	rootDir := FileDirectory on: self filePath.	^ rootDir fileNamesMatching: '*.png'! !!Experiments class methodsFor: 'accessing' stamp: 'edc 1/12/2019 07:19'!externalFolder	"Transcript show: Experiments externalFolder;cr"	^ externalFolder		! !!Experiments class methodsFor: 'accessing' stamp: 'edc 6/3/2017 12:17'!externalFolder: aDirName 	externalFolder := aDirName! !!Experiments class methodsFor: 'accessing' stamp: 'edc 1/14/2017 08:25'!lista	"Experiments lista"	^ lista		ifNil: [lista := (StandardFileStream readOnlyFileNamed: self filePath + 'txt/CountryList.txt') contents.			lista := lista findTokens: String lf.			]! !!Experiments class methodsFor: 'accessing' stamp: 'edc 3/21/2019 08:54'!queMeCuenta	"Experiments queMeCuenta"	^ queMeCuenta		ifNil: [queMeCuenta := 1]! !!Experiments class methodsFor: 'accessing' stamp: 'edc 3/21/2019 08:54'!queMeCuenta: anIndex 	"Experiments queMeCuenta: 64"	queMeCuenta := anIndex! !!Experiments class methodsFor: 'accessing' stamp: 'edc 1/16/2017 08:40'!resetlista	"Experiments resetlista"	 lista := nil		! !!Experiments class methodsFor: 'accessing' stamp: 'edc 1/12/2017 08:07'!resources^resources ifNil:[resources := Dictionary new]! !!Experiments class methodsFor: 'accessing' stamp: 'edc 2/6/2017 08:51'!user^user ifNil:[ 'visita']! !!Experiments class methodsFor: 'accessing' stamp: 'edc 2/11/2017 09:52'!user: aUser 	"Experiments user: 'Edgardec'  "	user := aUser! !!Experiments class methodsFor: 'html' stamp: 'edc 1/12/2019 07:10'!filePath"Transcript show:  Experiments filePath;cr"self  externalFolder ifNotNil:[	^ FileDirectory default pathName , FileDirectory slash , self  externalFolder , FileDirectory slash].^ FileDirectory default pathName , FileDirectory slash! !!Experiments class methodsFor: 'html' stamp: 'edc 9/11/2020 06:54'!saveImgFromButtons	"Experiments saveImgFromButtons"	| lista img |	self  externalFolder: 'Experiments'.	lista := #('resume' ).	lista		do: [:nombre | 			img := (SimpleButtonMorph newWithLabel: nombre) imageForm.			img writeJPEGfileNamed: self filePath + 'img/' + nombre + '.jpg']! !!Experiments class methodsFor: 'html' stamp: 'edc 6/7/2017 05:55'!saveImgFromButtons: lista	" Experiments saveImgFromButtons"	|  img |		lista do: [ :nombre |		img _ (SimpleButtonMorph newWithLabel: nombre) imageForm.		img writeJPEGfileNamed: self filePath + 'img/' + nombre + '.jpg' ].! !!Experiments class methodsFor: 'html' stamp: 'edc 2/6/2019 05:37'!saveImgFromString: aString 	"Experiments saveImgFromString:'factorial64.html'"	| img |	self externalFolder: 'Experiments'.	img := (SimpleButtonMorph newWithLabel: aString) imageForm.	img writePNGfileNamed: self filePath + 'img/' + aString + '.png'! !!Experiments class methodsFor: 'html' stamp: 'edc 10/14/2020 10:12'!todoList	"Experiments todoList explore"	^ todoList		ifNil: [todoList := HVTodoList new]! !!Experiments class methodsFor: 'as yet unclassified' stamp: 'edc 9/4/2020 14:35'!gwd	"Divagaciones gwd explore"	| rootDir |	self externalFolder: 'Experiments/img'.	rootDir := FileDirectory on: self filePath.	^ rootDir fileNamesMatching: '*.jpg'! !